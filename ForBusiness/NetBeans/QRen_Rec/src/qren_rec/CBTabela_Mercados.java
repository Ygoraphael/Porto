package fme;

import java.util.HashMap;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class CBTabela_Mercados
  extends CBTabela
{
  Frame_Mercados P12;
  
  public String getPagina()
  {
    return "Mercados";
  }
  

  int tab_index = 0;
  boolean is_inov = CParseConfig.hconfig.get("extensao").equals("i20");
  int n_anos = is_inov ? 2 : 1;
  
  CBTabela_Mercados() {
    tag = "Mercados";
    P12 = ((Frame_Mercados)fmeApp.Paginas.getPage("Mercados"));
    if (P12 == null) return;
    initialize();
  }
  
  CBTabela_Mercados(Frame_Mercados p, int idx) {
    tag = "Mercados";
    tab_index = idx;
    P12 = p;
    initialize();
  }
  




  void initialize()
  {
    P12.cbd_mercados = this;
    started = true;
    
    cols = new CHTabColModel[10];
    cols[0] = new CHTabColModel("tipo", "Tipo (id)", true, true, false, null);
    cols[1] = new CHTabColModel("tipo_d", "Tipo", true, true, true, null);
    cols[2] = new CHTabColModel("bem_serv", "Bem / Serviço (id)", true, true, false, null);
    cols[3] = new CHTabColModel("bem_serv_d", "Bem / Serviço", false, true, true, null);
    cols[4] = new CHTabColModel("pais", "Mercado (País) (id)", true, true, false, null);
    cols[5] = new CHTabColModel("pais_d", "Mercado (País)", false, true, true, null);
    cols[6] = new CHTabColModel("quant_pre", "Ano Pré-Proj. (Quant.)", true, true, true, CFLib.VLD_NUM_0);
    cols[7] = new CHTabColModel("val_pre", "Ano Pré-Proj. (Valor)", true, true, true, CFLib.VLD_VALOR_0);
    cols[8] = new CHTabColModel("quant_pos", "Ano Pós-Proj. (Quant.)", true, true, true, CFLib.VLD_NUM_0);
    cols[9] = new CHTabColModel("val_pos", "Ano Pós-Proj. (Valor)", true, true, true, CFLib.VLD_VALOR_0);
    
    init_dados(13);
    

    init_handler(P12.getJTable_Mercados());
    P12.getJTable_Mercados().addKeyListener(new TableKeyListener(this));
    handler.width = P12.getJScrollPane_Mercados().getWidth();
    
    ui = new GroupableTableHeaderUI();
    ui.setH(2, P12.getJTable_Mercados());
    
    ui.add_col(0, 0, 1, 2, "Tipo");
    ui.add_col(1, 0, 1, 2, "Bem / Serviço");
    ui.add_col(2, 0, 1, 2, "<html><div align='center'>Mercado<br>(País)</div></html>");
    ui.add_col(3, 0, 2, 1, "Ano Pré-Proj.");
    ui.add_col(3, 1, 1, 1, "Quant.");
    ui.add_col(4, 1, 1, 1, "Valor");
    ui.add_col(5, 0, 2, 1, "Ano Pós-Proj.");
    ui.add_col(5, 1, 1, 1, "Quant.");
    ui.add_col(6, 1, 1, 1, "Valor");
    
    P12.getJTable_Mercados().getTableHeader().setUI(ui);
    
    handler.set_col_comboS(1, 0.09D, null, CTabelas.TipoMercado, 1, 60);
    handler.set_col_comboS(3, 0.325D, null, CTabelas.BensServicos, 1, 500);
    handler.set_col_comboS(5, 0.17D, null, CTabelas.Pais, 1, 200);
    handler.set_col_text(6, 0.07D, "R");
    handler.set_col_text(7, 0.125D, "R");
    handler.set_col_text(8, 0.07D, "R");
    handler.set_col_text(9, 0.125D, "R");
  }
  


  void on_update(String colname, int nRow, String v)
  {
    if (colname.equals("tipo_d")) {
      String tipo = "";
      if (v.length() > 0) tipo = CTabelas.TipoMercado.lookup(1, v, 0);
      setColValue("tipo", nRow, tipo);
    }
    if (colname.equals("tipo")) {
      String tipo_d = "";
      if (v.length() > 0) tipo_d = CTabelas.TipoMercado.lookup(0, v, 1);
      setColValue("tipo_d", nRow, tipo_d);
    }
    
    if (colname.equals("bem_serv_d")) {
      String bem_serv = "";
      if (v.length() > 0) bem_serv = CTabelas.BensServicos.lookup(1, v, 0);
      setColValue("bem_serv", nRow, bem_serv);
    }
    if (colname.equals("bem_serv")) {
      String bem_serv_d = "";
      if (v.length() > 0) bem_serv_d = CTabelas.BensServicos.lookup(0, v, 1);
      setColValue("bem_serv_d", nRow, bem_serv_d);
    }
    
    if (colname.equals("pais_d")) {
      String pais = "";
      if (v.length() > 0) pais = CTabelas.Pais.lookup(1, v, 0);
      setColValue("pais", nRow, pais);
    }
    if (colname.equals("pais")) {
      String pais_d = "";
      if (v.length() > 0) pais_d = CTabelas.Pais.lookup(0, v, 1);
      setColValue("pais_d", nRow, pais_d);
    }
    









    if (((colname.equals("tipo_d")) || (colname.equals("pais_d")) || (colname.startsWith("val_"))) && (!CBData.reading_xml)) {
      calc_mercados();
    }
  }
  
  void calc_mercados() {
    double nacional_pre = 0.0D;
    double internacional_pre = 0.0D;
    
    double nacional_pos = 0.0D;
    double internacional_pos = 0.0D;
    
    String lst_internacionais = "";
    
    for (int i = 0; i < dados.size(); i++) {
      if ((getColValue("tipo", i).equals("01")) && 
        (!getColValue("pais", i).equals("")))
      {

        if (getColValue("pais", i).equals("PT")) {
          nacional_pre += _lib.to_double(getColValue("val_pre", i));
          nacional_pos += _lib.to_double(getColValue("val_pos", i));
        }
        else {
          if (!getColValue("pais", i).matches(lst_internacionais)) lst_internacionais = lst_internacionais + "|" + getColValue("pais", i);
          internacional_pre += _lib.to_double(getColValue("val_pre", i));
          internacional_pos += _lib.to_double(getColValue("val_pos", i));
        } }
    }
    double total_pre = nacional_pre + internacional_pre;
    double total_pos = nacional_pos + internacional_pos;
    
    double nacional_perc_pre = total_pre == 0.0D ? 0.0D : nacional_pre / total_pre * 100.0D;
    double internacional_perc_pre = total_pre == 0.0D ? 0.0D : internacional_pre / total_pre * 100.0D;
    double nacional_perc_pos = total_pos == 0.0D ? 0.0D : nacional_pos / total_pos * 100.0D;
    double internacional_perc_pos = total_pos == 0.0D ? 0.0D : internacional_pos / total_pos * 100.0D;
    
    CBData.Mercados2.setColValue("perc_pre", 0, nacional_perc_pre == 0.0D ? "" : _lib.to_string(nacional_perc_pre));
    CBData.Mercados2.setColValue("perc_pos", 0, nacional_perc_pos == 0.0D ? "" : _lib.to_string(nacional_perc_pos));
    CBData.Mercados2.setColValue("perc_pre", 1, internacional_perc_pre == 0.0D ? "" : _lib.to_string(internacional_perc_pre));
    CBData.Mercados2.setColValue("perc_pos", 1, internacional_perc_pos == 0.0D ? "" : _lib.to_string(internacional_perc_pos));
    
    Mercados2handler.j.revalidate();
    Mercados2handler.j.repaint();
    
    CBData.Mercados3.init_dados(0);
    Mercados3handler.j.revalidate();
    Mercados3handler.j.repaint();
    
    if (lst_internacionais.length() == 0) { return;
    }
    String[] internacionais = lst_internacionais.split("\\|");
    
    for (int i = 0; i < internacionais.length; i++)
      if (!internacionais[i].equals("")) {
        double pre = 0.0D;double pos = 0.0D;
        for (int j = 0; j < dados.size(); j++)
          if ((getColValue("tipo", j).equals("01")) && 
            (getColValue("pais", j).equals(internacionais[i]))) {
            pre += _lib.to_double(getColValue("val_pre", j));
            pos += _lib.to_double(getColValue("val_pos", j));
          }
        double perc_pre = pre / total_pre * 100.0D;
        double perc_pos = pos / total_pos * 100.0D;
        int n = 0;
        for (n = 0; n < Mercados3dados.size(); n++)
          if (_lib.to_double(CBData.Mercados3.getColValue("perc_pre", n)) < perc_pre)
            break;
        CBData.Mercados3.ins_row_at(n);
        CBData.Mercados3.setColValue("pais", n, internacionais[i]);
        CBData.Mercados3.setColValue("pais_d", n, CTabelas.Pais.getDesign(internacionais[i]));
        CBData.Mercados3.setColValue("perc_pre", n, _lib.to_string(perc_pre));
        CBData.Mercados3.setColValue("perc_pos", n, _lib.to_string(perc_pos));
      }
    Mercados3handler.j.revalidate();
    Mercados3handler.j.repaint();
  }
  
  String on_xml(String tag, int row, String v) {
    String s = "";
    if (tag.equals("tipo"))
      s = s + _lib.xml_encode("tipo_d", getColValue("tipo_d", row));
    if (tag.equals("bem_serv"))
      s = s + _lib.xml_encode("bem_serv_d", getColValue("bem_serv_d", row));
    if (tag.equals("pais"))
      s = s + _lib.xml_encode("pais_d", getColValue("pais_d", row));
    return s;
  }
  








































  CHValid_Grp validar(CHValid_Grp err_list, String cp)
  {
    String titulo = "Atividade económica por mercado";
    if (cp.length() > 0) { titulo = titulo + cp;
    }
    if (err_list == null)
      err_list = new CHValid_Grp(this, titulo);
    if (!started) { return err_list;
    }
    
    if ((isEmpty()) && (tab_index == 0)) {
      err_list.add_msg(new CHValid_Msg("mercados", "Lista vazia"));
    }
    int ano_cand = (int)CBData.Params.getByName("ano_cand").valueAsDouble();
    int ano_inicial = ano_cand;
    

    String v = PromotorgetByName"dt_inicio_act"v;
    if (v.length() == 10)
      ano_inicial = Integer.parseInt(v.substring(0, 4));
    int idx_i = 6 - (ano_cand - ano_inicial - 1) * 2;
    if (idx_i < 0) { idx_i = 0;
    }
    boolean tem_compras = false;
    
    for (int j = 0; j < dados.size(); j++) {
      if (getColValue("tipo", j).equals("03")) tem_compras = true;
      String mask = "-R-R-R----";
      
      TabError[] e = isIncompletAll(j, mask.toString());
      for (int ii = 0; (e != null) && (ii < e.length); ii++) {
        err_list.add_msg(new CHValid_Msg("incomplet", e[ii].msg("Linha %L incompleta: %T - %o")));
      }
      if (!isRowEmpty(j)) {
        for (int i = 6; i <= 7; i++) {
          String ano_s = cols[i].col_name;
          String s = ((String[])dados.elementAt(j))[i];
          if ((i >= idx_i) && (s.length() == 0))
          {
            String _msg = "Linha " + (j + 1) + " incompleta: " + ano_s + " - %o";
            _msg = _msg.replaceAll("\n", " ");
            _msg = _msg.replaceAll("<br>", " ");
            _msg = _msg.replaceAll("<html>", "");
            _msg = _msg.replaceAll("</html>", "");
            _msg = _msg.replaceAll("<div align='center'>", "");
            _msg = _msg.replaceAll("</div>", "");
            
            err_list.add_msg(new CHValid_Msg("mercados", _msg));
          }
        }
        for (int i = 8; i <= 9; i++) {
          String ano_s = cols[i].col_name;
          String s = ((String[])dados.elementAt(j))[i];
          
          if (s.length() == 0) {
            String _msg = "Linha " + (j + 1) + " incompleta: " + ano_s + " - %o";
            _msg = _msg.replaceAll("\n", " ");
            _msg = _msg.replaceAll("<br>", " ");
            _msg = _msg.replaceAll("<html>", "");
            _msg = _msg.replaceAll("</html>", "");
            _msg = _msg.replaceAll("<div align='center'>", "");
            _msg = _msg.replaceAll("</div>", "");
            
            err_list.add_msg(new CHValid_Msg("mercados", _msg));
          }
        }
      }
    }
    

    CBTabela_DR_SNC dr = CBData.DR_SNC;
    

    double vendas_tt_pre = getSumIf("val_pre", "tipo", "01");
    double vendas_tt_pre_dr = _lib.to_double(dr.getColValue("val_p1", 0));
    if (vendas_tt_pre != vendas_tt_pre_dr) {
      err_list.add_msg(new CHValid_Msg("mercados", "O Valor total das Vendas (" + _lib.to_format(vendas_tt_pre) + ") não pode ser diferente das 'Vendas e serviços prestados' (" + _lib.to_format(vendas_tt_pre_dr) + ") na Demonstração de Resultados para " + (ano_cand - 1)));
    }
    
    String dt_fim = DadosProjectogetByName"dt_fim"v;
    if ((dt_fim.length() > 0) && (ano_cand != 0)) {
      int ano_pos = _lib.to_int(dt_fim.substring(0, 4)) + n_anos;
      double vendas_tt_pos = getSumIf("val_pos", "tipo", "01");
      int idx_pos = dr.getColIndexByName(ano_pos);
      String tag_pos = cols[idx_pos].col_tag;
      int idx_cand = dr.getColIndexByName(ano_cand);
      
      if ((idx_cand != -1) && (idx_pos != -1) && (idx_pos >= idx_cand + n_anos)) {
        double vendas_tt_pos_dr = _lib.to_double(dr.getColValue(tag_pos, 0));
        if (vendas_tt_pos != vendas_tt_pos_dr) {
          err_list.add_msg(new CHValid_Msg("mercados", "O Valor total das Vendas (" + _lib.to_format(vendas_tt_pos) + ") não pode ser diferente das 'Vendas e serviços prestados' (" + _lib.to_format(vendas_tt_pos_dr) + ") na Demonstração de Resultados para " + ano_pos));
        }
      }
    }
    
    String compras = "";
    if (CParseConfig.hconfig.get("compras") != null)
      compras = (String)CParseConfig.hconfig.get("compras");
    if ((CBData.Dimensao.is_pme()) && (!tem_compras) && (!compras.equals(""))) {
      for (int i = 0; i < ProjCaedados.size(); i++) {
        String cae = CBData.ProjCae.getColValue("cae", i);
        if (cae.matches(compras)) {
          err_list.add_msg(new CHValid_Msg("mercados", "Em projetos desenvolvidos por PME, e com atividade do Comércio (divisão 45 a 47), deverá apresentar Compras"));
          break;
        }
      }
    }
    
    return err_list;
  }
}
