package fme;

import java.io.PrintStream;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class CBTabela_Socios
  extends CBTabela
{
  public String getPagina() { return "IdProm_3"; }
  
  boolean upd = false;
  
  Frame_IdProm_3 P01;
  int tab_index = 0;
  
  CBTabela_Socios() { P01 = ((Frame_IdProm_3)fmeApp.Paginas.getPage("IdProm_3"));
    if (P01 == null) return;
    initialize();
  }
  
  CBTabela_Socios(Frame_IdProm_3 p, int idx) {
    P01 = p;
    tab_index = idx;
    initialize();
  }
  
  void initialize() {
    P01.cbd_socios = this;
    
    tag = "Socios";
    started = true;
    
    cols = new CHTabColModel[7];
    cols[0] = new CHTabColModel("tipo_soc", "Tipo(id)", true, true, false, null);
    cols[1] = new CHTabColModel("tipo_soc_d", "\nTipo", false, true, true, null);
    
    cols[2] = new CHTabColModel("pais", "País (id)", true, true, false, null);
    cols[3] = new CHTabColModel("pais_d", "País", false, true, true, null);
    
    cols[4] = new CHTabColModel("nif", "NIF/NIPC", true, true, true, CFLib.VLD_NIF);
    
    cols[5] = new CHTabColModel("design", "Designação", true, true, true, null);
    
    cols[6] = new CHTabColModel("perc", "Particip.<br>%", true, true, true, CFLib.VLD_PERC);
    
    init_dados(4);
    

    init_handler(P01.getJTable_Socios());
    P01.getJTable_Socios().addKeyListener(new TableKeyListener(this));
    handler.width = (P01.getJScrollPane_Socios().getWidth() - 20);
    
    String[] genero = { "", "Feminino", "Masculino" };
    
    handler.set_col_comboS(1, 0.27D, null, CTabelas.TipoPart, 1, 340);
    handler.set_col_comboS(3, 0.2D, null, CTabelas.Pais, 1, 170);
    handler.set_col_text(4, 0.128D, null);
    handler.set_col_text(5, 0.3D, null);
    handler.set_col_text(6, 0.1D, "R");
  }
  
  void get_dados_adc(String nif, int nRow) {
    if ((!CBData.T.equals("")) || (!fmeComum.ON)) return;
    String url = fmeComum.atend_pas + "acesso/formulario/atend-import-adc.php?NIF=" + nif + "&QDR=" + tag;
    
    System.out.println("socios " + nif);
    
    Http http = new Http(url);
    Document doc = http.doPostRequestDoc("");
    try
    {
      XPath xp = XPathFactory.newInstance().newXPath();
      String design = xp.evaluate("//fme/" + tag + "/nome", doc);
      
      setColValue("design", nRow, design);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
  
  void on_update(String colname, int nRow, String v) {
    if ((colname.equals("nif")) && (v.length() == 9) && (getColValue("design", nRow).equals("")) && (!CBData.reading_xml)) {
      get_dados_adc(v, nRow);
    }
    if (colname.equals("tipo_soc_d")) {
      String tipo_soc = "";
      if (v.length() > 0) tipo_soc = CTabelas.TipoPart.lookup(1, v, 0);
      setColValue("tipo_soc", nRow, tipo_soc);
    }
    if (colname.equals("tipo_soc")) {
      String tipo_soc_d = "";
      if (v.length() > 0) tipo_soc_d = CTabelas.TipoPart.lookup(0, v, 1);
      setColValue("tipo_soc_d", nRow, tipo_soc_d);
    }
    
    if (colname.equals("pais_d")) {
      String pais = "";
      if (v.length() > 0) pais = CTabelas.Pais.lookup(1, v, 0);
      setColValue("pais", nRow, pais);
    }
    if (colname.equals("pais")) {
      String pais_d = "";
      if (v.length() > 0) pais_d = CTabelas.Pais.lookup(0, v, 1);
      setColValue("pais_d", nRow, pais_d);
    }
    
    if (!CBData.reading_xml)
      upd = true;
  }
  
  CHValid_Grp validar(CHValid_Grp err_list, String cp) {
    String titulo = "Participantes no Capital do Beneficiário";
    if (cp.length() > 0) titulo = titulo + cp;
    handler.__garbage_stop_editing();
    if (err_list == null) {
      err_list = new CHValid_Grp(this, titulo);
    }
    
    if ((isEmpty()) && (tab_index == 0)) {
      err_list.add_msg(new CHValid_Msg("socios", "Lista vazia"));
    }
    else
    {
      for (int i = 0; i < dados.size(); i++) {
        TabError[] e = isIncompletAll(i, getMask(i));
        for (int ii = 0; (e != null) && (ii < e.length); ii++) {
          err_list.add_msg(new CHValid_Msg("incomplet", 
            e[ii].msg("Linha %L incompleta: %T - %o", 
            "Linha %L: %T - Neste Caso Não Preenche")));
        }
      }
      double p = getSum("perc");
      if ((_lib.round(p) != 100.0D) && (!isEmpty()))
        err_list.add_msg(new CHValid_Msg("100%", 
          "Deve indicar as Participações correspondentes a 100% do Capital"));
      if (!isUnique("nif"))
        err_list.add_msg(new CHValid_Msg("unique", 
          "Não podem existir NIF's repetidos"));
    }
    return err_list;
  }
  
  String getMask(int nRow) {
    StringBuffer mask = new StringBuffer("-R-R-RR");
    String codigo = getColValue("tipo_soc", nRow);
    if ((codigo != null) && (codigo.equals("08"))) {
      mask.replace(0, 10, "-R----R");
    }
    String pais = getColValue("pais", nRow);
    
    if ((pais.length() > 0) && (pais.equals("PT"))) {
      mask.setCharAt(getColIndex("nif"), 'R');
    }
    if ((codigo != null) && (codigo.equals("08"))) {
      mask.setCharAt(getColIndex("nif"), '-');
    }
    return mask.toString();
  }
  
  String on_xml(String tag, int row, String v) {
    String s = "";
    if (tag.equals("tipo_soc"))
      s = s + _lib.xml_encode("tipo_soc_d", getColValue("tipo_soc_d", row));
    if (tag.equals("pais"))
      s = s + _lib.xml_encode("pais_d", getColValue("pais_d", row));
    return s;
  }
}
