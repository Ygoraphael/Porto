package fme;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class CBTabela_Atividades
  extends CBTabela
{
  Frame_Atividades P;
  
  public String getPagina()
  {
    return "Atividades";
  }
  
  class TagBoxMsg {
    private final String tag;
    private final String msg;
    private final JComboBox cbo;
    
    TagBoxMsg(String tag, JComboBox cbo, String msg) {
      this.tag = tag;
      this.cbo = cbo;
      this.msg = msg;
    } }
  
  Map<CBTabela, TagBoxMsg> client = new HashMap();
  int detalhe = -1;
  int limite = 9000;
  
  CBTabela_Atividades() { P = ((Frame_Atividades)fmeApp.Paginas.getPage("Atividades"));
    if (P == null) return;
    initialize();
  }
  
  void initialize() {
    tag = "Atividades";
    
    cols = new CHTabColModel[10];
    cols[0] = new CHTabColModel("atividade", "Nº", true, false, true, null);
    cols[1] = new CHTabColModel("tipologia", "Tipologia da Operação (id)", true, true, false, null);
    cols[2] = new CHTabColModel("tipologia_d", "Tipologia da Operação", false, true, true, null);
    cols[3] = new CHTabColModel("design", "Designação", true, true, true, null);
    cols[4] = new CHTabColModel("inovacao", "Tipo de Atividade de Inovação (id)", true, true, false, null);
    cols[5] = new CHTabColModel("inovacao_d", "Tipo de<br>Atividade<br>de Inovação", false, true, true, null);
    cols[6] = new CHTabColModel("grau_nov", "Grau de novidade e difusão (id)", true, true, false, null);
    cols[7] = new CHTabColModel("grau_nov_d", "Grau de novidade e difusão", false, true, false, null);
    cols[8] = new CHTabColModel("texto", "Justificação", true, true, false, null);
    cols[9] = new CHTabColModel("n_acoes", "Nº de ações de prospeção/promoção", true, true, false, null);
    
    init_dados(6);
    

    init_handler(P.getJTable_Atividades());
    P.getJTable_Atividades().addKeyListener(new TableKeyListener(this));
    handler.width = P.getJScrollPane_Atividades().getWidth();
    
    handler.set_col_text(0, 0.04D, "C");
    handler.set_col_comboS(2, 0.35D, null, CTabelas.TipoProj, 1, 450);
    handler.set_col_text(3, 0.48D, null);
    handler.set_col_comboS(5, 0.1D, null, CTabelas.TipoInovacao, 1, 0);
    

    set_detalhe();
    started = true;
  }
  
  void on_update(String colname, int nRow, String v)
  {
    if (colname.equals("tipologia_d")) {
      String tipologia = "";
      if (v.length() > 0) tipologia = CTabelas.TipoProj.lookup(1, v, 0);
      setColValue("tipologia", nRow, tipologia);
    }
    if (colname.equals("tipologia")) {
      String tipologia_d = "";
      if (v.length() > 0) tipologia_d = CTabelas.TipoProj.lookup(0, v, 1);
      setColValue("tipologia_d", nRow, tipologia_d);
    }
    if ((colname.equals("tipologia_d")) || (colname.equals("design"))) {
      String atividade = getColValue("atividade", nRow);
      if (atividade.length() > 0) {
        for (int i = 0; i < QInvdados.size(); i++) {
          String accao_qi = CBData.QInv.getColValue("atividade", i);
          if (accao_qi.equals(atividade)) {
            if (colname.equals("design")) CBData.QInv.setColValue("atividade_d", i, v);
            if (colname.equals("tipologia_d")) {
              String tipologia = "";
              if (v.length() > 0) tipologia = CTabelas.TipoProj.lookup(1, v, 0);
              CBData.QInv.setColValue("tipologia", i, tipologia);
              CBData.QInv.on_update("tipologia", i, tipologia);
            }
          }
        }
      }
    }
    if (colname.equals("inovacao_d")) {
      String inovacao = "";
      if (v.length() > 0) inovacao = CTabelas.TipoInovacao.lookup(1, v, 0);
      setColValue("inovacao", nRow, inovacao);
    }
    if (colname.equals("inovacao")) {
      String inovacao_d = "";
      if (v.length() > 0) inovacao_d = CTabelas.TipoInovacao.lookup(0, v, 1);
      setColValue("inovacao_d", nRow, inovacao_d);
    }
    if (colname.equals("grau_nov_d")) {
      String grau_nov = "";
      if (v.length() > 0) grau_nov = CTabelas.GrauNovidade.lookup(1, v, 0);
      setColValue("grau_nov", nRow, grau_nov);
    }
    if (colname.equals("grau_nov")) {
      String grau_nov_d = "";
      if (v.length() > 0) grau_nov_d = CTabelas.GrauNovidade.lookup(0, v, 1);
      setColValue("grau_nov_d", nRow, grau_nov_d);
    }
    if ((!CBData.reading_xml) && (!CBData.clear_pg)) {
      after_update();
    }
  }
  
  public void set_detalhe() {
    int nRow = P.getJTable_Atividades().getSelectedRow();
    if ((nRow >= 0) && (nRow < P.getJTable_Atividades().getRowCount())) {
      P.setDescricao(getColValue("design", nRow));
      String tipologia = getColValue("tipologia", nRow);
      P.getJPanel_Detalhe().setVisible(tipologia.matches("1003|1004"));
    } else {
      P.setDescricao("");
      P.getJPanel_Detalhe().setVisible(false);
    }
  }
  
  public void after_update() {
    set_detalhe();
    
    Map<String, String> alt = new HashMap();
    CBTabela tab; int i; for (Iterator localIterator1 = client.entrySet().iterator(); localIterator1.hasNext(); 
        

        i < dados.size())
    {
      Map.Entry<CBTabela, TagBoxMsg> map = (Map.Entry)localIterator1.next();
      tab = (CBTabela)map.getKey();
      String tag = getValuetag;
      i = 0; continue;
      String v = tab.getColValue(tag, i);
      if ((!v.equals("")) && 
        (!alt.containsKey(v))) {
        alt.put(v, "");
      }
      i++;
    }
    





    int i = 0; for (int j = 1; i < dados.size(); i++) {
      String v = getColValue("atividade", i);
      if ((alt.containsKey(v)) || (!isRowEmpty(i))) {
        String w = Integer.toString(j++);
        setColValue("atividade", i, w);
        if (!v.equals("")) {
          alt.put(v, w);
        }
      }
    }
    CTabelas.Atividades.refresh();
    

    for (Map.Entry<CBTabela, TagBoxMsg> map : client.entrySet()) {
      CBTabela tab = (CBTabela)map.getKey();
      String tag = getValuetag;
      for (int i = 0; i < dados.size(); i++) {
        String v = tab.getColValue(tag, i);
        if (!v.equals("")) {
          String w = "";
          if (alt.containsKey(v))
            w = (String)alt.get(v);
          if (!v.equals(w)) {
            tab.setColValue(tag, i, w);
            tab.on_update(tag, i, w);
          }
        } }
      CTabelas.Atividades._populateComboBox(getValuecbo, 0);
    }
    
    handler.j.repaint();
  }
  

  void on_current_row() { on_row(P.getJTable_Atividades().getSelectedRow()); }
  
  void on_row(int nRow) {
    if (nRow != detalhe) altera_detalhe(nRow);
    CBData.DadosAtividade.on_update2();
  }
  
  void altera_detalhe(int nRow) { if ((nRow >= 0) && (nRow < P.getJTable_Atividades().getRowCount())) {
      P.getjTextArea_Txt().setText(getColValue("texto", nRow));
      P.getJTextField_NrAcao().setText(getColValue("n_acoes", nRow));
    } else {
      P.getjTextArea_Txt().setText("");
      P.getJTextField_NrAcao().setText("");
    }
    detalhe = nRow;
    after_update();
  }
  
  public void addClient(CBTabela tab, String tag, JComboBox cbo, String msg) {
    client.put(tab, new TagBoxMsg(tag, cbo, msg));
  }
  
  public void removeClient(CBTabela tab) {
    client.remove(tab);
  }
  
  public boolean on_ins_row() {
    altera_detalhe(-1);
    if (super.on_ins_row()) {
      on_current_row();
      return true;
    }
    return false;
  }
  
  public boolean on_add_row() {
    altera_detalhe(-1);
    if (super.on_add_row()) {
      on_current_row();
      return true;
    }
    return false;
  }
  
  public boolean on_del_row() {
    String w = getColValue("atividade", handler.j.getSelectedRow());
    for (Map.Entry<CBTabela, TagBoxMsg> map : client.entrySet()) {
      if (getValuemsg != null) {
        CBTabela tab = (CBTabela)map.getKey();
        String tag = getValuetag;
        for (int i = 0; i < dados.size(); i++) {
          String v = tab.getColValue(tag, i);
          if ((!v.equals("")) && 
            (v.equals(w))) {
            JOptionPane.showMessageDialog(null, 
              "Esta atividade está a ser utilizada" + getValuemsg + ".", 
              "Apagar Linha", 0, null);
            return false;
          }
        }
      }
    }
    altera_detalhe(-1);
    if (super.on_del_row()) {
      on_current_row();
      return true;
    }
    return false;
  }
  
  String on_xml(String tag, int row, String v) {
    String s = "";
    if (tag.equals("tipologia"))
      s = s + _lib.xml_encode("tipologia_d", getColValue("tipologia_d", row));
    if (tag.equals("inovacao"))
      s = s + _lib.xml_encode("inovacao_d", getColValue("inovacao_d", row));
    if (tag.equals("grau_nov"))
      s = s + _lib.xml_encode("grau_nov_d", getColValue("grau_nov_d", row));
    return s;
  }
  
  CHValid_Grp validar(CHValid_Grp err_list) {
    String titulo = "Descrição das Atividades de Inovação";
    
    if (err_list == null) {
      err_list = new CHValid_Grp(this, titulo);
    }
    if (!started) { return err_list;
    }
    if (isEmpty()) {
      err_list.add_msg(new CHValid_Msg("atividades", "Lista vazia"));
    }
    for (int i = 0; i < dados.size(); i++) {
      StringBuffer mask = new StringBuffer("R-RR-R--R-");
      String tip = getColValue("tipologia", i);
      if (tip.matches("1003|1004")) mask.setCharAt(getColIndex("n_acoes"), 'R');
      TabError[] e = isIncompletAll(i, mask.toString());
      for (int ii = 0; (e != null) && (ii < e.length); ii++) {
        err_list.add_msg(new CHValid_Msg("incomplet", e[ii].msg("Linha %L incompleta: %T - %o")));
      }
      if (getColValue("texto", i).length() > limite) {
        err_list.add_msg(new CHValid_Msg("texto", "Linha " + (i + 1) + ": Texto demasiado extenso. Por favor, abrevie até " + limite + " caracteres."));
      }
      boolean tip_selected = false;
      if (!tip.equals("")) {
        for (int ii = 0; ii < Tipologiadados.size(); ii++) {
          if (tip.equals(CBData.Tipologia.getColValue("tipologia", ii))) {
            if (!CBData.Tipologia.getColValue("select", ii).equals("S")) break;
            tip_selected = true;
            
            break;
          }
        }
      } else {
        tip_selected = true;
      }
      if (!tip_selected) {
        err_list.add_msg(new CHValid_Msg("tipologia", 
          "Linha " + (i + 1) + ": Tipologia de Operação não selecionada na página de Dados do Projeto"));
      }
    }
    return err_list;
  }
}
