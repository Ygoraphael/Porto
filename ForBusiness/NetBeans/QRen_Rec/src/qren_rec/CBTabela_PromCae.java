package fme;

import java.util.Vector;
import javax.swing.JScrollPane;


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class CBTabela_PromCae
  extends CBTabela
{
  Frame_IdProm_1 P01;
  
  public String getPagina()
  {
    return "IdProm_1";
  }
  

  int tab_index = 0;
  String lst_caes_pos = "";
  
  CBTabela_PromCae() {
    P01 = ((Frame_IdProm_1)fmeApp.Paginas.getPage("IdProm_1"));
    if (P01 == null) return;
    initialize();
  }
  
  CBTabela_PromCae(Frame_IdProm_1 p, int idx) {
    P01 = p;
    tab_index = idx;
    initialize();
  }
  
  void initialize()
  {
    tag = "PromCae";
    started = true;
    force_xml = true;
    
    cols = new CHTabColModel[5];
    cols[0] = new CHTabColModel("origem", "Origem", true, false, false, null);
    cols[1] = new CHTabColModel("cae", "CAE", true, true, true, null);
    cols[2] = new CHTabColModel("cae_d", "Designação", false, false, true, null);
    cols[3] = new CHTabColModel("perc_pre", "% (pré)", true, false, true, CFLib.VLD_PERC);
    cols[4] = new CHTabColModel("perc_pos", "% (pós)", true, true, true, CFLib.VLD_PERC);
    
    init_dados(4);
    

    init_handler(P01.getJTable_CAE());
    P01.getJTable_CAE().addKeyListener(new TableKeyListener(this));
    handler.width = (P01.getJScrollPane_CAE().getWidth() - 2);
    

    handler.set_col_comboD(1, 0.1D, null, CTabelas.Cae, 0, 450);
    handler.set_col(2, 0.765D, null);
    handler.set_col_text(3, 0.07D, "R");
    handler.set_col_text(4, 0.07D, "R");
  }
  
  boolean isCellEditable(int i, int j)
  {
    String origem = getColValue("origem", i);
    if ((j == getColIndex("cae")) && (origem.equals("ADC")))
      return false;
    return cols[j].editable;
  }
  
  void on_update(String tag, int row, String v) {
    if (tag.equals("cae")) {
      String design = "";
      if (v.length() > 0) design = CTabelas.Cae.lookup(0, v, 1);
      setColValue("cae_d", row, design);
    }
  }
  
  boolean isRowEmpty(int row)
  {
    for (int j = 0; j < cols.length; j++)
    {
      String s = ((String[])dados.elementAt(row))[j];
      if (s.length() > 0) { return false;
      }
    }
    return true;
  }
  
  CHValid_Grp validar(CHValid_Grp err_list, String cp) {
    String titulo = "Atividade(s) Económica(s) do Beneficiário";
    if (cp.length() > 0) titulo = titulo + cp;
    if (err_list == null) {
      err_list = new CHValid_Grp(this, titulo);
    }
    
    if ((isEmpty()) && (tab_index == 0)) {
      err_list.add_msg(new CHValid_Msg("prom_cae", "Lista vazia"));
    } else {
      if (!isUnique("cae")) {
        err_list.add_msg(new CHValid_Msg("unique", "Não podem existir CAE's repetidas"));
      }
      TabError e = isIncomplet("-R---");
      if (e != null) {
        err_list.add_msg(new CHValid_Msg("incomplet", e.msg("Linha %L incompleta: %T - %o", ""), row, col));
      }
      if ((_lib.round(getSum("perc_pre")) != 100.0D) && (!isEmpty())) {
        err_list.add_msg(new CHValid_Msg("100%", "Deve indicar as CAE's correspondentes a 100% da atividade (pré-projeto)"));
      }
      if ((_lib.round(getSum("perc_pos")) != 100.0D) && (!isEmpty())) {
        err_list.add_msg(new CHValid_Msg("100%", "Deve indicar as CAE's correspondentes a 100% da atividade (pós-projeto)"));
      }
      double v = 0.0D;
      double v_anterior = 0.0D;
      

      int nRows = dados.size();
      
      for (int i = 0; i < nRows; i++) {
        String pos = ((String[])dados.elementAt(i))[getColIndex("perc_pos")];
        String s = ((String[])dados.elementAt(i))[getColIndex("perc_pre")];
        
        if ((_lib.to_double(pos) + _lib.to_double(s) == 0.0D) && (isIncomplet(i, "-R-RR") != null)) {
          err_list.add_msg(new CHValid_Msg("soma", 
            "Linha " + (i + 1) + " - Deve indicar pelo menos uma das % (pré ou pós)"));
        }
      }
    }
    












    return err_list;
  }
  
  String on_xml(String tag, int row, String v) {
    String s = "";
    if (tag.equals("cae"))
      s = s + _lib.xml_encode("cae_d", getColValue("cae_d", row));
    return s;
  }
  
  void before_get_dados_adc() {
    lst_caes_pos = "";
    for (int i = 0; i < dados.size(); i++) {
      if ((!getColValue("cae", i).equals("")) && 
        (!getColValue("perc_pos", i).equals("")))
        lst_caes_pos = (lst_caes_pos + getColValue("origem", i) + "::" + getColValue("cae", i) + "=" + getColValue("perc_pos", i) + ";");
    }
    if (lst_caes_pos.length() > 0) { lst_caes_pos = lst_caes_pos.substring(0, lst_caes_pos.length() - 1);
    }
  }
  

  void after_get_dados_adc()
  {
    if (lst_caes_pos.length() == 0) { return;
    }
    String[] clist = lst_caes_pos.split(";");
    for (int i = 0; i < dados.size(); i++) {
      if (!getColValue("cae", i).equals("")) {
        for (int j = 0; j < clist.length; j++) {
          String[] cae = clist[j].split("=");
          String[] cae2 = cae[0].split("::");
          int ii = 0;
          boolean on_tab = false;
          for (ii = 0; ii < dados.size(); ii++)
          {
            if ("".equals(getColValue("cae", ii))) break;
            if (cae2[1].equals(getColValue("cae", ii))) {
              setColValue("perc_pos", ii, cae[1]);
              on_tab = true;
            }
            
            if (on_tab) break;
          }
          if (!on_tab) {
            setColValue("cae", ii, cae2[1]);
            on_update("cae", ii, cae2[1]);
            setColValue("perc_pos", ii, cae[1]);
          }
        }
      }
    }
    
    for (int i = 0; i < dados.size(); i++) {
      if ((!getColValue("cae", i).equals("")) && 
        (!getColValue("perc_pos", i).equals("")))
        lst_caes_pos = (lst_caes_pos + getColValue("origem", i) + "::" + getColValue("cae", i) + "=" + getColValue("perc_pos", i) + ";");
    }
    if (lst_caes_pos.length() > 0) lst_caes_pos = lst_caes_pos.substring(0, lst_caes_pos.length() - 1);
  }
  
  void clearRow(int i)
  {
    for (int j = 0; j < cols.length; j++) {
      ((String[])dados.elementAt(i))[j] = "";
      if (((String[])dados.elementAt(i))[j] == null) ((String[])dados.elementAt(i))[j] = "";
      on_update(cols[j].col_tag, i, "");
    }
  }
}
