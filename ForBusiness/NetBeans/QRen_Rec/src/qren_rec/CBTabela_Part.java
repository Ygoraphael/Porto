package fme;

import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class CBTabela_Part
  extends CBTabela
{
  public String getPagina() { return "IdProm_3"; }
  
  boolean upd = false;
  
  Frame_IdProm_3 P01;
  int tab_index = 0;
  
  CBTabela_Part() { P01 = ((Frame_IdProm_3)fmeApp.Paginas.getPage("IdProm_3"));
    if (P01 == null) return;
    initialize();
  }
  
  CBTabela_Part(Frame_IdProm_3 p, int idx) {
    P01 = p;
    tab_index = idx;
    initialize();
  }
  
  void initialize()
  {
    tag = "Part";
    started = true;
    P01.cbd_part = this;
    
    cols = new CHTabColModel[7];
    cols[0] = new CHTabColModel("design", "Designação", true, true, true, null);
    cols[1] = new CHTabColModel("nif", "NIF/NIPC", true, true, true, CFLib.VLD_NIF);
    cols[2] = new CHTabColModel("perc", "Particip.<br>%", true, true, true, CFLib.VLD_PERC);
    cols[3] = new CHTabColModel("pais", "País (id)", true, true, false, null);
    cols[4] = new CHTabColModel("pais_d", "País", false, true, true, null);
    cols[5] = new CHTabColModel("controlo", "Controlo (id)", true, true, false, null);
    cols[6] = new CHTabColModel("controlo_d", "Controlo<br>Empresa", false, true, true, null);
    
    init_dados(4);
    

    init_handler(P01.getJTable_Part());
    P01.getJTable_Part().addKeyListener(new TableKeyListener(this));
    handler.width = (P01.getJScrollPane_Part().getWidth() - 20);
    
    handler.set_col_text(0, 0.475D, null);
    handler.set_col_text(1, 0.128D, null);
    handler.set_col_text(2, 0.095D, "R");
    handler.set_col_comboS(4, 0.2D, null, CTabelas.Pais, 1, 170);
    handler.set_col_comboS(6, 0.1D, null, CTabelas.SimNao, 1, 0);
  }
  
  void on_update(String colname, int nRow, String v) {
    if (colname.equals("pais_d")) {
      String pais = "";
      if (v.length() > 0) pais = CTabelas.Pais.lookup(1, v, 0);
      setColValue("pais", nRow, pais);
    }
    if (colname.equals("pais")) {
      String pais_d = "";
      if (v.length() > 0) pais_d = CTabelas.Pais.lookup(0, v, 1);
      if ((CBData.reading_xml) && (pais_d == null)) pais_d = "";
      setColValue("pais_d", nRow, pais_d);
    }
    if (colname.equals("controlo_d")) {
      String controlo = "";
      if (v.length() > 0) controlo = CTabelas.SimNao.lookup(1, v, 0);
      setColValue("controlo", nRow, controlo);
    }
    if (colname.equals("controlo")) {
      String controlo_d = "";
      if (v.length() > 0) controlo_d = CTabelas.SimNao.lookup(0, v, 1);
      setColValue("controlo_d", nRow, controlo_d);
    }
    if ((colname.equals("perc")) && (v.length() > 0) && 
      (getColValue("controlo", nRow).equals("")) && 
      (_lib.to_double(getColValue("perc", nRow)) > 50.0D)) {
      setColValue("controlo", nRow, "S");
      on_update("controlo", nRow, "S");
    }
  }
  

  CHValid_Grp validar(CHValid_Grp err_list)
  {
    if (err_list == null) {
      err_list = new CHValid_Grp(this, "Participações do Beneficiário no Capital de Outras Entidades");
    }
    boolean in_reg = false;
    for (int i = 0; i < PromLocaldados.size(); i++) {
      String freguesia = CBData.PromLocal.getColValue("freguesia", i);
      if ((!freguesia.equals("")) && 
        (!freguesia.equals("111127")))
      {
        if (freguesia.matches("1105.*|1106.*|1110.*|1111.*|1115.*|1116.*")) {
          in_reg = true;
          break;
        } }
    }
    if ((in_reg) && (DimensaogetByName"dimensao"v.equals("4")) && 
      (isEmpty())) {
      err_list.add_msg(new CHValid_Msg("part", "Lista vazia"));
    }
    for (int i = 0; i < dados.size(); i++) {
      TabError[] e = isIncompletAll(i, getMask(i));
      for (int ii = 0; (e != null) && (ii < e.length); ii++) {
        err_list.add_msg(new CHValid_Msg("incomplet", e[ii].msg("Linha %L incompleta: %T - %o")));
      }
      if ((_lib.to_double(getColValue("perc", i)) > 50.0D) && (getColValue("controlo", i).equals("N"))) {
        err_list.add_msg(new CHValid_Msg("part", "Linha " + (i + 1) + ": se a Participação é superior a 50,00% deve indicar 'Sim' no Controlo Empresa"));
      }
    }
    if (!isUnique("nif")) {
      err_list.add_msg(new CHValid_Msg("unique", "Não podem existir NIF's repetidos"));
    }
    return err_list;
  }
  
  String getMask(int i) {
    StringBuffer mask = new StringBuffer("R-R-R-R");
    if (getColValue("pais", i).equals("PT"))
      mask.setCharAt(getColIndex("nif"), 'R');
    return mask.toString();
  }
  
  String on_xml(String tag, int row, String v) {
    String s = "";
    if (tag.equals("pais"))
      s = s + _lib.xml_encode("pais_d", getColValue("pais_d", row));
    if (tag.equals("controlo"))
      s = s + _lib.xml_encode("controlo_d", getColValue("controlo_d", row));
    return s;
  }
}
